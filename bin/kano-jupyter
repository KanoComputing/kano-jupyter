#!/usr/bin/env python2

# kano-jupyter
#
# Copyright (C) 2019 Kano Computing Ltd.
# License: http://www.gnu.org/licenses/gpl-2.0.txt GNU GPL v2
#
# Start and stop jupyter-notebook along with the Browser, on Kano OS.
#
# TODO: This is a PoC - Refactor code

"""
Kano Jupyter Notebook startup program

Usage:
  kano-jupyter run [--notebook=<nfile>] [--directory=<directory>] [--url=<weburl>] [--delay=<secs>] [--verbose]
  kano-jupyter status [--verbose]
  kano-jupyter synchronize [--verbose]
  kano-jupyter -h | --help

Options:
  -n, --notebook=<nfile>     Name of Notebook file to load at startup
  -d, --directory=<sandbox>  Sandboxed tree directory where Jupyter will load documents from
  -u, --url=<weburl>         Use an alternative URL to connect to Jupyter Web server
  -d, --delay=<secs>         Delay in seconds to synchronize Chromium and Jupyter web server
  -v, --verbose              Explain synchronization tasks as they come through
  -h, --help                 Show this message.
"""


import os
import sys
import time
import thread
import docopt

default_jupyter_url = 'http://localhost:8888/notebooks/'
kano_jupyter_samples = [
    '/usr/share/kano-jupyter/notebooks',
    '/boot/notebooks'
]
kano_jupyter_samples_user = os.path.expanduser('~/Kano-Jupyter')
default_chromium_delay = 5

RC_SUCCESS = 0
RC_INCORRECT_ARGS = 1


def thr_start_jupyter(default_jupyter_directory):
    '''
    Thread wich starts the Kano Jupyter Notebook web server in the background.
    '''
    os.system('jupyter-notebook --no-browser --notebook-dir="{}"'.format(default_jupyter_directory))


def start_browser(url=None, startup_delay=0):
    '''
    Starts default browser at optional given url, with optional startup delay in seconds.
    '''
    if startup_delay:
        time.sleep(startup_delay)

    os.system('chromium-browser --start-maximized "{}"'.format(url))


def stop_jupyter():
    '''
    Stops the Jupyter Notebook Web Server
    '''
    os.system('kill $(pidof -x jupyter-notebook)')


def jupyter_status(verbose=True):
    '''
    Convenience function to learn whether Kano Jupyter is running
    '''
    output = os.popen('ps aux | grep jupyter-notebook').read()
    if verbose:
        print(output)


def jupyter_synchronize(verbose=True, srcs=kano_jupyter_samples, trg=kano_jupyter_samples_user):
    '''
    Synchronize Kano Jupyter distributed samples from the Debian Package
    into current user Home Directory, for personal editing.
    '''
    srcs = ['{}/*'.format(src) for src in srcs]
    rsync_out = os.popen(
        'rsync -rvt --update {src} {dst}/'.format(
            src=' '.join(srcs),
            dst=trg
        )).read()
    if verbose:
        print(rsync_out)


def main(args):
    '''
    Main entry point to the code.
    '''
    if args['run']:
        os.system('kdesk-hourglass-app "Chromium"')
        jupyter_synchronize(verbose=args['--verbose'])
        thread.start_new_thread(
            thr_start_jupyter,
            (args['--directory'] or kano_jupyter_samples_user,)
        )

        path = args.get('--notebook') if args['--notebook'] else ''
        url = '{}{}'.format(default_jupyter_url, path)

        start_browser(
            url=args['--url'] or url,
            startup_delay=args['--delay'] or default_chromium_delay
        )
        stop_jupyter()
        return RC_SUCCESS

    elif args['status']:
        jupyter_status(verbose=args['--verbose'])
        return RC_SUCCESS

    elif args['synchronize']:
        jupyter_synchronize(verbose=args['--verbose'])
        return RC_SUCCESS


if __name__ == '__main__':
    # Show the entire docstring when incorrect arguments are given.
    try:
        args = docopt.docopt(__doc__)
    except docopt.DocoptExit:
        print(__doc__)
        sys.exit(RC_INCORRECT_ARGS)

    sys.exit(main(args) or RC_SUCCESS)
